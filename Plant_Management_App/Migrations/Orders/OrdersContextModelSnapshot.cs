// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Plant_Management_App;

#nullable disable

namespace Plant_Management_App.Migrations.Orders
{
    [DbContext(typeof(OrdersContext))]
    partial class OrdersContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Plant_Management_App.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Plant_Management_App.Models.EnvironmentLog", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogID"));

                    b.Property<int>("GreenhouseID")
                        .HasColumnType("int");

                    b.Property<decimal>("HumidityPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TemperatureC")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("LogID");

                    b.HasIndex("GreenhouseID");

                    b.ToTable("EnvironmentLog");
                });

            modelBuilder.Entity("Plant_Management_App.Models.Greenhouse", b =>
                {
                    b.Property<int>("GreenhouseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GreenhouseID"));

                    b.Property<bool>("HumidityControlled")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SizeSqFt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("TemperatureControlled")
                        .HasColumnType("bit");

                    b.HasKey("GreenhouseID");

                    b.ToTable("Greenhouse");
                });

            modelBuilder.Entity("Plant_Management_App.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryID"));

                    b.Property<int>("BatchID")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantID")
                        .HasColumnType("int");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InventoryID");

                    b.HasIndex("BatchID");

                    b.HasIndex("PlantID");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("Plant_Management_App.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Plant_Management_App.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailID"));

                    b.Property<int>("InventoryID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("InventoryID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Plant_Management_App.Models.Plant", b =>
                {
                    b.Property<int>("PlantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantID"));

                    b.Property<string>("CommonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrowingSeason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScientificName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SoilType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SunRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaterRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlantID");

                    b.ToTable("Plant");
                });

            modelBuilder.Entity("Plant_Management_App.Models.PlantBatch", b =>
                {
                    b.Property<int>("BatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BatchID"));

                    b.Property<DateTime?>("ExpectedHarvestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GreenhouseID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlantID")
                        .HasColumnType("int");

                    b.Property<int>("QuantityPlanted")
                        .HasColumnType("int");

                    b.Property<DateTime>("SeedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TransplantDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BatchID");

                    b.HasIndex("GreenhouseID");

                    b.HasIndex("PlantID");

                    b.ToTable("PlantBatch");
                });

            modelBuilder.Entity("Plant_Management_App.Models.EnvironmentLog", b =>
                {
                    b.HasOne("Plant_Management_App.Models.Greenhouse", "Greenhouse")
                        .WithMany("environmentLogs")
                        .HasForeignKey("GreenhouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Greenhouse");
                });

            modelBuilder.Entity("Plant_Management_App.Models.Inventory", b =>
                {
                    b.HasOne("Plant_Management_App.Models.PlantBatch", "PlantBatch")
                        .WithMany("Inventories")
                        .HasForeignKey("BatchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plant_Management_App.Models.Plant", "Plant")
                        .WithMany("Inventories")
                        .HasForeignKey("PlantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("PlantBatch");
                });

            modelBuilder.Entity("Plant_Management_App.Models.Order", b =>
                {
                    b.HasOne("Plant_Management_App.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Plant_Management_App.Models.OrderDetail", b =>
                {
                    b.HasOne("Plant_Management_App.Models.Inventory", "Inventory")
                        .WithMany("OrderDetails")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plant_Management_App.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Plant_Management_App.Models.PlantBatch", b =>
                {
                    b.HasOne("Plant_Management_App.Models.Greenhouse", "Greenhouse")
                        .WithMany("PlantBatches")
                        .HasForeignKey("GreenhouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plant_Management_App.Models.Plant", "Plant")
                        .WithMany("PlantBatches")
                        .HasForeignKey("PlantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Greenhouse");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Plant_Management_App.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Plant_Management_App.Models.Greenhouse", b =>
                {
                    b.Navigation("PlantBatches");

                    b.Navigation("environmentLogs");
                });

            modelBuilder.Entity("Plant_Management_App.Models.Inventory", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Plant_Management_App.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Plant_Management_App.Models.Plant", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("PlantBatches");
                });

            modelBuilder.Entity("Plant_Management_App.Models.PlantBatch", b =>
                {
                    b.Navigation("Inventories");
                });
#pragma warning restore 612, 618
        }
    }
}
